// This file is auto-generated by @hey-api/openapi-ts

export type VenueInfo = {
    id: number;
    sourceId: string | null;
    name: string;
    city: string | null;
    state: string | null;
    country: string | null;
};

export type TeamInfo = {
    id: number;
    sourceId: string;
    school: string;
    mascot: string | null;
    abbreviation: string | null;
    displayName: string | null;
    shortDisplayName: string | null;
    primaryColor: string | null;
    secondaryColor: string | null;
    currentVenueId: number | null;
    currentVenue: string | null;
    currentCity: string | null;
    currentState: string | null;
    conferenceId: number | null;
    conference: string | null;
};

export type TeamRosterPlayer = {
    id: number;
    sourceId: string;
    name: string;
    firstName: string | null;
    lastName: string | null;
    jersey: string | null;
    position: string | null;
    height: number | null;
    weight: number | null;
    hometown: {
        country: string | null;
        state: string | null;
        city: string | null;
    };
    dateOfBirth: string | null;
    startSeason: number;
    endSeason: number;
};

export type TeamRoster = {
    teamId: number;
    teamSourceId: string;
    team: string;
    conference: string | null;
    season: number;
    players: Array<TeamRosterPlayer>;
};

export type TeamSeasonUnitStats = {
    fieldGoals: {
        pct: number | null;
        attempted: number | null;
        made: number | null;
    };
    twoPointFieldGoals: {
        pct: number | null;
        attempted: number | null;
        made: number | null;
    };
    threePointFieldGoals: {
        pct: number | null;
        attempted: number | null;
        made: number | null;
    };
    freeThrows: {
        pct: number | null;
        attempted: number | null;
        made: number | null;
    };
    rebounds: {
        total: number | null;
        defensive: number | null;
        offensive: number | null;
    };
    turnovers: {
        teamTotal: number | null;
        total: number | null;
    };
    fouls: {
        flagrant: number | null;
        technical: number | null;
        total: number | null;
    };
    points: {
        fastBreak: number | null;
        offTurnovers: number | null;
        inPaint: number | null;
        total: number | null;
    };
    fourFactors: {
        freeThrowRate: number | null;
        offensiveReboundPct: number | null;
        turnoverRatio: number | null;
        effectiveFieldGoalPct: number | null;
    };
    assists: number | null;
    blocks: number | null;
    steals: number | null;
    possessions: number | null;
    rating: number | null;
    trueShooting: number | null;
};

export type TeamSeasonStats = {
    season: number;
    seasonLabel: string;
    teamId: number;
    team: string;
    conference: string | null;
    games: number;
    totalMinutes: number | null;
    pace: number | null;
    offense: TeamSeasonUnitStats;
    defense: TeamSeasonUnitStats;
};

export type SeasonType = 'postseason' | 'preseason' | 'regular';

export type PlayerSeasonStats = {
    season: number;
    seasonLabel: string;
    teamId: number;
    team: string;
    conference: string | null;
    athleteId: number;
    athleteSourceId: string;
    name: string;
    position: string;
    games: number;
    starts: number;
    minutes: number;
    points: number | null;
    turnovers: number | null;
    fouls: number | null;
    assists: number | null;
    steals: number | null;
    blocks: number | null;
    usage: number | null;
    offensiveRating: number | null;
    defensiveRating: number | null;
    netRating: number | null;
    effectiveFieldGoalPct: number | null;
    trueShootingPct: number | null;
    assistsTurnoverRatio: number | null;
    freeThrowRate: number | null;
    offensiveReboundPct: number | null;
    fieldGoals: {
        pct: number | null;
        attempted: number | null;
        made: number | null;
    };
    twoPointFieldGoals: {
        pct: number | null;
        attempted: number | null;
        made: number | null;
    };
    threePointFieldGoals: {
        pct: number | null;
        attempted: number | null;
        made: number | null;
    };
    freeThrows: {
        pct: number | null;
        attempted: number | null;
        made: number | null;
    };
    rebounds: {
        total: number | null;
        defensive: number | null;
        offensive: number | null;
    };
    winShares: {
        total: number | null;
        defensive: number | null;
        offensive: number | null;
    };
};

export type SrsInfo = {
    season: number;
    teamId: number;
    team: string;
    conference: string;
    rating: number;
};

export type AdjustedEfficiencyInfo = {
    season: number;
    teamId: number;
    team: string;
    conference: string;
    offensiveRating: number;
    defensiveRating: number;
    netRating: number;
};

export type PollTeamInfo = {
    season: number;
    seasonType: SeasonType;
    week: number;
    pollDate: string | null;
    pollType: string;
    teamId: number;
    team: string;
    conference: string | null;
    ranking: number | null;
    points: number | null;
    firstPlaceVotes: number | null;
};

export type ShotInfo = {
    shooter: {
        name: string;
        id: number;
    } | null;
    made: boolean;
    range: 'rim' | 'jumper' | 'three_pointer' | 'free_throw';
    assisted: boolean;
    assistedBy: {
        name: string;
        id: number;
    } | null;
};

export type PlayInfo = {
    id: number;
    sourceId: string;
    gameId: number;
    gameSourceId: string;
    gameStartDate: string;
    season: number;
    seasonType: SeasonType;
    gameType: string;
    playType: string;
    isHomeTeam: boolean | null;
    teamId: number | null;
    team: string | null;
    conference: string | null;
    opponentId: number | null;
    opponent: string | null;
    opponentConference: string | null;
    period: number;
    clock: string;
    secondsRemaining: number;
    homeScore: number;
    awayScore: number;
    homeWinProbability: number | null;
    scoringPlay: boolean | null;
    shootingPlay: boolean | null;
    scoreValue: number | null;
    wallclock: string | null;
    playText: string | null;
    participants: Array<{
        name: string;
        id: number;
    }>;
    shotInfo: ShotInfo | null;
};

export type PlayTypeInfo = {
    id: number;
    name: string;
};

export type GameLineInfo = {
    provider: string;
    spread: number | null;
    overUnder: number | null;
    homeMoneyline: number | null;
    awayMoneyline: number | null;
    spreadOpen: number | null;
    overUnderOpen: number | null;
};

export type GameLines = {
    gameId: number;
    season: number;
    seasonType: SeasonType;
    startDate: string;
    homeTeamId: number;
    homeTeam: string;
    homeConference: string | null;
    homeScore: number | null;
    awayTeamId: number;
    awayTeam: string;
    awayConference: string | null;
    awayScore: number | null;
    lines: Array<GameLineInfo>;
};

export type LineProviderInfo = {
    id: number;
    name: string;
};

export type GameStatus = 'scheduled' | 'in_progress' | 'final' | 'postponed' | 'cancelled';

export type GameInfo = {
    id: number;
    sourceId: string;
    seasonLabel: string;
    season: number;
    seasonType: SeasonType;
    startDate: string;
    startTimeTbd: boolean;
    neutralSite: boolean;
    conferenceGame: boolean;
    gameType: string | null;
    status: GameStatus;
    attendance: number | null;
    homeTeamId: number;
    homeTeam: string;
    homeConferenceId: number | null;
    homeConference: string | null;
    homePoints: number | null;
    homePeriodPoints: Array<number> | null;
    homeWinner: boolean | null;
    awayTeamId: number;
    awayTeam: string;
    awayConferenceId: number | null;
    awayConference: string | null;
    awayPoints: number | null;
    awayPeriodPoints: Array<number> | null;
    awayWinner: boolean | null;
    excitement: number | null;
    venueId: number | null;
    venue: string | null;
    city: string | null;
    state: string | null;
};

export type GameMediaInfo = {
    gameId: number;
    season: number;
    seasonLabel: string;
    seasonType: SeasonType;
    startDate: string;
    startTimeTbd: boolean;
    homeTeamId: number;
    homeTeam: string;
    homeConference: string | null;
    awayTeamId: number;
    awayTeam: string;
    awayConference: string | null;
    neutralSite: boolean;
    conferenceGame: boolean;
    gameType: string | null;
    notes: string | null;
    broadcasts: Array<{
        broadcastName: string;
        broadcastType: string;
    }>;
};

export type GameBoxScoreTeamStats = {
    fieldGoals: {
        pct: number | null;
        attempted: number | null;
        made: number | null;
    };
    twoPointFieldGoals: {
        pct: number | null;
        attempted: number | null;
        made: number | null;
    };
    threePointFieldGoals: {
        pct: number | null;
        attempted: number | null;
        made: number | null;
    };
    freeThrows: {
        pct: number | null;
        attempted: number | null;
        made: number | null;
    };
    rebounds: {
        total: number | null;
        defensive: number | null;
        offensive: number | null;
    };
    turnovers: {
        teamTotal: number | null;
        total: number | null;
    };
    fouls: {
        flagrant: number | null;
        technical: number | null;
        total: number | null;
    };
    points: {
        fastBreak: number | null;
        offTurnovers: number | null;
        inPaint: number | null;
        byPeriod: Array<number> | null;
        largestLead: number | null;
        total: number | null;
    };
    fourFactors: {
        freeThrowRate: number | null;
        offensiveReboundPct: number | null;
        turnoverRatio: number | null;
        effectiveFieldGoalPct: number | null;
    };
    assists: number | null;
    blocks: number | null;
    steals: number | null;
    possessions: number | null;
    rating: number | null;
    trueShooting: number | null;
    gameScore: number | null;
};

export type GameBoxScoreTeam = {
    gameId: number;
    season: number;
    seasonLabel: string;
    seasonType: SeasonType;
    startDate: string;
    startTimeTbd: boolean;
    teamId: number;
    team: string;
    conference: string | null;
    opponentId: number;
    opponent: string;
    opponentConference: string | null;
    neutralSite: boolean;
    conferenceGame: boolean;
    gameType: string | null;
    notes: string | null;
    gameMinutes: number | null;
    pace: number | null;
    offense: GameBoxScoreTeamStats;
    defense: GameBoxScoreTeamStats;
};

export type GameBoxScorePlayers = {
    gameId: number;
    season: number;
    seasonLabel: string;
    seasonType: SeasonType;
    startDate: string;
    startTimeTbd: boolean;
    teamId: number;
    team: string;
    conference: string | null;
    opponentId: number;
    opponent: string;
    opponentConference: string | null;
    neutralSite: boolean;
    conferenceGame: boolean;
    gameType: string | null;
    notes: string | null;
    gameMinutes: number | null;
    gamePace: number | null;
    players: Array<{
        rebounds: {
            total: number | null;
            defensive: number | null;
            offensive: number | null;
        };
        freeThrows: {
            pct: number | null;
            attempted: number | null;
            made: number | null;
        };
        threePointFieldGoals: {
            pct: number | null;
            attempted: number | null;
            made: number | null;
        };
        twoPointFieldGoals: {
            pct: number | null;
            attempted: number | null;
            made: number | null;
        };
        fieldGoals: {
            pct: number | null;
            attempted: number | null;
            made: number | null;
        };
        offensiveReboundPct: number | null;
        freeThrowRate: number | null;
        assistsTurnoverRatio: number | null;
        gameScore: number | null;
        trueShootingPct: number | null;
        effectiveFieldGoalPct: number | null;
        netRating: number | null;
        defensiveRating: number | null;
        offensiveRating: number | null;
        usage: number | null;
        blocks: number | null;
        steals: number | null;
        assists: number | null;
        fouls: number | null;
        turnovers: number | null;
        points: number | null;
        minutes: number | null;
        ejected: boolean | null;
        starter: boolean | null;
        position: string;
        name: string;
        athleteSourceId: string;
        athleteId: number;
    }>;
};

export type ConferenceInfo = {
    id: number;
    sourceId: string;
    name: string;
    abbreviation: string;
    shortName: string;
};

export type ConferenceHistory = {
    id: number;
    sourceId: string;
    name: string;
    abbreviation: string;
    shortName: string;
    teams: Array<{
        endSeason: number | null;
        startSeason: number;
        mascot: string | null;
        school: string;
        sourceId: string;
        id: number;
    }>;
};

export type GetVenuesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/venues';
};

export type GetVenuesResponses = {
    /**
     * Ok
     */
    200: Array<VenueInfo>;
};

export type GetVenuesResponse = GetVenuesResponses[keyof GetVenuesResponses];

export type GetTeamsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional conference filter
         */
        conference?: string;
        /**
         * Optional season filter
         */
        season?: number;
    };
    url: '/teams';
};

export type GetTeamsResponses = {
    /**
     * Ok
     */
    200: Array<TeamInfo>;
};

export type GetTeamsResponse = GetTeamsResponses[keyof GetTeamsResponses];

export type GetTeamRosterData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Season filter
         */
        season: number;
        /**
         * Optional team filter
         */
        team?: string;
    };
    url: '/teams/roster';
};

export type GetTeamRosterResponses = {
    /**
     * Ok
     */
    200: Array<TeamRoster>;
};

export type GetTeamRosterResponse = GetTeamRosterResponses[keyof GetTeamRosterResponses];

export type GetTeamSeasonStatsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional season filter, required if team is not provided
         */
        season?: number;
        /**
         * Optional season type filter
         */
        seasonType?: SeasonType;
        /**
         * Optional team name filter, required if season is not provided
         */
        team?: string;
        /**
         * Optional conference abbreviation filter
         */
        conference?: string;
        startDateRange?: string;
        endDateRange?: string;
    };
    url: '/stats/team/season';
};

export type GetTeamSeasonStatsResponses = {
    /**
     * Ok
     */
    200: Array<TeamSeasonStats>;
};

export type GetTeamSeasonStatsResponse = GetTeamSeasonStatsResponses[keyof GetTeamSeasonStatsResponses];

export type GetPlayerSeasonStatsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Required season filter
         */
        season: number;
        /**
         * Optional season type filter
         */
        seasonType?: SeasonType;
        /**
         * Optional team name filter
         */
        team?: string;
        /**
         * Optional conference abbreviation filter
         */
        conference?: string;
        startDateRange?: string;
        endDateRange?: string;
    };
    url: '/stats/player/season';
};

export type GetPlayerSeasonStatsResponses = {
    /**
     * Ok
     */
    200: Array<PlayerSeasonStats>;
};

export type GetPlayerSeasonStatsResponse = GetPlayerSeasonStatsResponses[keyof GetPlayerSeasonStatsResponses];

export type GetSrsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional season filter
         */
        season?: number;
        /**
         * Optional team filter
         */
        team?: string;
        /**
         * Optional conference abbreviation filter
         */
        conference?: string;
    };
    url: '/ratings/srs';
};

export type GetSrsResponses = {
    /**
     * Ok
     */
    200: Array<SrsInfo>;
};

export type GetSrsResponse = GetSrsResponses[keyof GetSrsResponses];

export type GetAdjustedEfficiencyData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional season filter
         */
        season?: number;
        /**
         * Optional team filter
         */
        team?: string;
        /**
         * Optional conference abbreviation filter
         */
        conference?: string;
    };
    url: '/ratings/adjusted';
};

export type GetAdjustedEfficiencyResponses = {
    /**
     * Ok
     */
    200: Array<AdjustedEfficiencyInfo>;
};

export type GetAdjustedEfficiencyResponse = GetAdjustedEfficiencyResponses[keyof GetAdjustedEfficiencyResponses];

export type GetRankingsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional season filter
         */
        season?: number;
        /**
         * Optional season type filter
         */
        seasonType?: SeasonType;
        /**
         * Optional week filter
         */
        week?: number;
        /**
         * Optional poll type filter ("ap" or "coaches")
         */
        pollType?: 'ap' | 'coaches';
        /**
         * Optional team filter
         */
        team?: string;
        /**
         * Optional conference filter
         */
        conference?: string;
    };
    url: '/rankings';
};

export type GetRankingsResponses = {
    /**
     * Ok
     */
    200: Array<PollTeamInfo>;
};

export type GetRankingsResponse = GetRankingsResponses[keyof GetRankingsResponses];

export type GetPlaysData = {
    body?: never;
    path: {
        /**
         * Game id filter
         */
        gameId: number;
    };
    query?: {
        /**
         * Optional filter to only return shooting plays
         */
        shootingPlaysOnly?: boolean;
    };
    url: '/plays/game/{gameId}';
};

export type GetPlaysResponses = {
    /**
     * Ok
     */
    200: Array<PlayInfo>;
};

export type GetPlaysResponse = GetPlaysResponses[keyof GetPlaysResponses];

export type GetPlaysByPlayerIdData = {
    body?: never;
    path: {
        /**
         * Required player id filter
         */
        playerId: number;
    };
    query: {
        /**
         * Required season filter
         */
        season: number;
        /**
         * Optional filter to only return shooting plays
         */
        shootingPlaysOnly?: boolean;
    };
    url: '/plays/player/{playerId}';
};

export type GetPlaysByPlayerIdResponses = {
    /**
     * Ok
     */
    200: Array<PlayInfo>;
};

export type GetPlaysByPlayerIdResponse = GetPlaysByPlayerIdResponses[keyof GetPlaysByPlayerIdResponses];

export type GetPlaysByTeamData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Required season filter
         */
        season: number;
        /**
         * Required team filter
         */
        team: string;
        /**
         * Optional filter to only return shooting plays
         */
        shootingPlaysOnly?: boolean;
    };
    url: '/plays/team';
};

export type GetPlaysByTeamResponses = {
    /**
     * Ok
     */
    200: Array<PlayInfo>;
};

export type GetPlaysByTeamResponse = GetPlaysByTeamResponses[keyof GetPlaysByTeamResponses];

export type GetPlaysByDateData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Required date filter in ISO 8601 format (YYYY-MM-DD)
         */
        date: string;
        /**
         * Optional filter to only return shooting plays
         */
        shootingPlaysOnly?: boolean;
    };
    url: '/plays/date';
};

export type GetPlaysByDateResponses = {
    /**
     * Ok
     */
    200: Array<PlayInfo>;
};

export type GetPlaysByDateResponse = GetPlaysByDateResponses[keyof GetPlaysByDateResponses];

export type GetPlayTypesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/plays/types';
};

export type GetPlayTypesResponses = {
    /**
     * Ok
     */
    200: Array<PlayTypeInfo>;
};

export type GetPlayTypesResponse = GetPlayTypesResponses[keyof GetPlayTypesResponses];

export type GetLinesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional season filter
         */
        season?: number;
        /**
         * Optional team name filter
         */
        team?: string;
        /**
         * Optional conference abbreviation filter
         */
        conference?: string;
        /**
         * Optional start timestamp in ISO 8601 format
         */
        startDateRange?: string;
        /**
         * Optional end timestamp in ISO 8601 format
         */
        endDateRange?: string;
    };
    url: '/lines';
};

export type GetLinesResponses = {
    /**
     * Ok
     */
    200: Array<GameLines>;
};

export type GetLinesResponse = GetLinesResponses[keyof GetLinesResponses];

export type GetProvidersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lines/providers';
};

export type GetProvidersResponses = {
    /**
     * Ok
     */
    200: Array<LineProviderInfo>;
};

export type GetProvidersResponse = GetProvidersResponses[keyof GetProvidersResponses];

export type GetGamesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional start timestamp in ISO 8601 format
         */
        startDateRange?: string;
        /**
         * Optional end timestamp in ISO 8601 format
         */
        endDateRange?: string;
        /**
         * Optional team name filter
         */
        team?: string;
        /**
         * Optional conference abbreviation filter
         */
        conference?: string;
        /**
         * Optional season filter
         */
        season?: number;
        /**
         * Optional season type filter
         */
        seasonType?: SeasonType;
        /**
         * Optional game status filter
         */
        status?: GameStatus;
    };
    url: '/games';
};

export type GetGamesResponses = {
    /**
     * Ok
     */
    200: Array<GameInfo>;
};

export type GetGamesResponse = GetGamesResponses[keyof GetGamesResponses];

export type GetBroadcastsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional start timestamp in ISO 8601 format
         */
        startDateRange?: string;
        /**
         * Optional end timestamp in ISO 8601 format
         */
        endDateRange?: string;
        /**
         * Optional team name filter
         */
        team?: string;
        /**
         * Optional conference abbreviation filter
         */
        conference?: string;
        /**
         * Optional season filter
         */
        season?: number;
        /**
         * Optional season type filter
         */
        seasonType?: SeasonType;
    };
    url: '/games/media';
};

export type GetBroadcastsResponses = {
    /**
     * Ok
     */
    200: Array<GameMediaInfo>;
};

export type GetBroadcastsResponse = GetBroadcastsResponses[keyof GetBroadcastsResponses];

export type GetGameTeamsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional start timestamp in ISO 8601 format
         */
        startDateRange?: string;
        /**
         * Optional end timestamp in ISO 8601 format
         */
        endDateRange?: string;
        /**
         * Optional team name filter
         */
        team?: string;
        /**
         * Optional conference abbreviation filter
         */
        conference?: string;
        /**
         * Optional season filter
         */
        season?: number;
        /**
         * Optional season type filter
         */
        seasonType?: SeasonType;
    };
    url: '/games/teams';
};

export type GetGameTeamsResponses = {
    /**
     * Ok
     */
    200: Array<GameBoxScoreTeam>;
};

export type GetGameTeamsResponse = GetGameTeamsResponses[keyof GetGameTeamsResponses];

export type GetGamePlayersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional start timestamp in ISO 8601 format
         */
        startDateRange?: string;
        /**
         * Optional end timestamp in ISO 8601 format
         */
        endDateRange?: string;
        /**
         * Optional team name filter
         */
        team?: string;
        /**
         * Optional conference abbreviation filter
         */
        conference?: string;
        /**
         * Optional season filter
         */
        season?: number;
        /**
         * Optional season type filter
         */
        seasonType?: SeasonType;
    };
    url: '/games/players';
};

export type GetGamePlayersResponses = {
    /**
     * Ok
     */
    200: Array<GameBoxScorePlayers>;
};

export type GetGamePlayersResponse = GetGamePlayersResponses[keyof GetGamePlayersResponses];

export type GetConferencesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/conferences';
};

export type GetConferencesResponses = {
    /**
     * Ok
     */
    200: Array<ConferenceInfo>;
};

export type GetConferencesResponse = GetConferencesResponses[keyof GetConferencesResponses];

export type GetConferenceHistoryData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional conference abbreviation filter
         */
        conference?: string;
    };
    url: '/conferences/history';
};

export type GetConferenceHistoryResponses = {
    /**
     * Ok
     */
    200: Array<ConferenceHistory>;
};

export type GetConferenceHistoryResponse = GetConferenceHistoryResponses[keyof GetConferenceHistoryResponses];

export type ClientOptions = {
    baseUrl: 'https://api.collegebasketballdata.com/' | (string & {});
};